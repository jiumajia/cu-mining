# -*- coding: utf-8 -*-from sklearn.model_selection import GridSearchCVfrom sklearn.ensemble import GradientBoostingClassifierimport timefrom mining.single_runer import run_datadef GBT(train_x, train_y, test_x, test_y):    start = time.clock()    parameters = {'n_estimators': [150],  #range(10, 301, 10),                  'learning_rate': [0.8],  #[x*0.1 for x in range(1, 10)],                  'max_depth': [3],  # range(2, 10),                  'random_state': [9],  # range(0, 10),                  'min_samples_split': [3],  # range(2, 10),                  # 'subsample': range(1, 10),                  }    #    clf = GridSearchCV(GradientBoostingClassifier(), parameters)    clf.fit(train_x, train_y)    end = time.clock()    accurcy = clf.score(test_x, test_y)    print accurcy    print clf.best_estimator_    print "time: %f s" % (end - start)    return accurcy    # max_accuracy = 0    # select_flag = 0    # loop_times = 0    # for n_es in [100, 200, 300, 400, 500]:    #     for l_rt in range(1, 10):    #         for m_mx in range(1, 10):    #             for r_rst in range(0, 10):    #                 rfe = GradientBoostingClassifier(n_estimators=n_es, learning_rate=l_rt*0.1,    #                                                  max_depth=m_mx, random_state=r_rst)    #                 rfe.fit(train_data, train_label_data)    #    #                 # prediction = rfe.predict(test_data)    #                 # accuracy = accuracy_score(prediction, test_label_data)    #                 accuracy = rfe.score(test_data, test_label_data)    #                 if max_accuracy < accuracy:    #                     max_accuracy = accuracy    #                     parm_1 = n_es    #                     parm_2 = l_rt    #                     parm_3 = m_mx    #                     parm_4 = r_rst    #                 loop_times += 1    # print max_accuracy    # print "parm1 :", parm_1, "parm2 :", parm_2, "parm3 :", parm_3,  "parm4 :", parm_4    # print "loop times : ", loop_timesif __name__ == "__main__":    # single testing    train_x, train_y, test_x, test_y = run_data()    GBT(train_x, train_y, test_x, test_y)